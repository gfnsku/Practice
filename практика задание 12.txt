import tkinter as tk
from tkinter import messagebox
from tkinter import ttk
import pandas as pd


# Функция для вычисления процента недовыполнения плана
def calculate():
    try:
        # Считывание данных с полей ввода
        plan_values = [float(entry.get()) for entry in plan_entries]
        real_values = [float(entry.get()) for entry in real_entries]

        # Создание DataFrame
        data = {
            "Предприятие": [f"Предприятие {i + 1}" for i in range(10)],
            "Плановый показатель": plan_values,
            "Реальный показатель": real_values
        }
        df = pd.DataFrame(data)

        # Вычисление процента недовыполнения плана
        df['Недовыполнение (%)'] = ((df['Плановый показатель'] - df['Реальный показатель']) / df[
            'Плановый показатель']) * 100

        # Отбор предприятий, которые не выполнили план
        df_not_met = df[df['Реальный показатель'] < df['Плановый показатель']]

        # Очищаем таблицу
        for row in tree.get_children():
            tree.delete(row)

        # Вывод результата в таблицу
        if not df_not_met.empty:
            for _, row in df_not_met.iterrows():
                tree.insert("", "end", values=(row["Предприятие"], row["Недовыполнение (%)"]))
        else:
            tree.insert("", "end", values=("Все предприятия выполнили план", "", ""))

    except ValueError:
        messagebox.showerror("Ошибка ввода", "Пожалуйста, введите корректные числовые значения.")


# Создание основного окна
root = tk.Tk()
root.title("Анализ выполнения плана")

# Добавление меток и полей ввода для плановых и реальных показателей
frame = tk.Frame(root)
frame.pack(padx=10, pady=10)

plan_entries = []
real_entries = []

for i in range(10):
    label = tk.Label(frame, text=f"Предприятие {i + 1}")
    label.grid(row=i, column=0, padx=5, pady=5, sticky="w")

    plan_entry = tk.Entry(frame)
    plan_entry.grid(row=i, column=1, padx=5, pady=5)
    plan_entries.append(plan_entry)

    real_entry = tk.Entry(frame)
    real_entry.grid(row=i, column=2, padx=5, pady=5)
    real_entries.append(real_entry)

# Кнопка для вычисления
calculate_button = tk.Button(root, text="Вычислить", command=calculate)
calculate_button.pack(pady=10)

# Создание таблицы для вывода результата
columns = ("Предприятие", "Недовыполнение (%)")
tree = ttk.Treeview(root, columns=columns, show="headings", height=10)
tree.heading("Предприятие", text="Предприятие")
tree.heading("Недовыполнение (%)", text="Недовыполнение (%)")
tree.pack(padx=10, pady=10)

# Запуск приложения
root.mainloop()
